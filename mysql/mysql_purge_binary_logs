#!/bin/bash
#
# Copyright (c) 1999 - 2010, Vodafone Group Services Ltd
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#     * Neither the name of the Vodafone Group Services Ltd nor the names of
#     its contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
WFCONFIG='/etc/wayf/scripts.conf'

# pull in wayfinder configuration
[ -f "${WFCONFIG}" ] && . "${WFCONFIG}"

mysql_user=${MYSQL_USER:-''}
mysql_pass=${MYSQL_PASS:-''}
mysql_timeout=${MYSQL_TIMEOUT:-'10'}

debug=${DEBUG:-'0'}
dryrun=0

master_node=''
slave_nodes=''

function die {
	retval=${2:-1}
	echo "Died (${retval}), ${1}" 1>&2
	exit ${retval}
}

function printd {
	level=$1 ; shift
	[ ${level} -gt ${debug} ] && return 1
	echo "$(date +'%b %d %T') [$$]: $@" 1>&2
	return 0
}

function min {
	echo $(echo "$@" | grep -o -E '[^[:space:]]+' | sort -g | head --lines=1)
	return 0
}

while getopts  "m:s:u:p:d:n" args
do
	case "$args" in
		m) master_node="$OPTARG";;
		s) slave_nodes="$slave_nodes $OPTARG";;
		u) mysql_user="$OPTARG";;
		p) mysql_pass="$OPTARG";;
		d) debug="$OPTARG";;
		n) dryrun=1;;
	esac
done

[[ ${master_node} == '' || ${slave_nodes} == '' || ${mysql_user} == '' || ${mysql_pass} == '' ]] && die "please specify required parameters"

printd 4 "PPID (${PPID})"
printd 2 "Flushing logs on master (${master_node})"
if [ ${dryrun} -eq 0 ] ; then mysql --connect_timeout=${mysql_timeout} -u ${mysql_user} -p${mysql_pass} -h ${master_node} -e "FLUSH LOGS;"
else echo "Dry run, skipped flushing logs on master" ; fi
[ $? -ne 0 ] && die "could not flush logs on master (${master_node})"

currentlog=''
for slave_node in ${slave_nodes} ; do
   printd 2 "Getting replication info from slave ($slave_node)"
   slave_result=`mysql --connect_timeout=${mysql_timeout} -E -u ${mysql_user} -p${mysql_pass} -h ${slave_node} -e "SHOW SLAVE STATUS;"`
   [ $? -ne 0 ] && die "could not get replication info from slave ($slave_node)"

   currentlog=$(min ${currentlog} `echo "${slave_result}" | grep -E '^[[:space:]]*Master_Log_File:' | awk '{print $2}'`)
   slaveiorunning=`echo "${slave_result}" | grep -E '^[[:space:]]*Slave_IO_Running:' | awk '{print $2}'`
   slaverunning=`echo "${slave_result}" | grep -E '^[[:space:]]*Slave_SQL_Running:' | awk '{print $2}'`

   [[ ${slaveiorunning} != Yes || ${slaverunning} != Yes ]] && die "slave replication was not running on ${slave_node}"
done

printd 2 "Getting replication info from master ($master_node)"
master_result=`mysql --connect_timeout=${mysql_timeout} -E -u ${mysql_user} -p${mysql_pass} -h ${master_node} -e "SHOW MASTER STATUS;"`
[ $? -ne 0 ] && die "could not get replication info from master ($master_node)"

masterlog=`echo "${master_result}" | grep -E '^[[:space:]]*File:' | awk '{print $2}'`

printd 2 "Purging logs up to $currentlog ON $master_node (which is using $masterlog)"
if [ ${dryrun} -eq 0 ] ; then mysql --connect_timeout=${mysql_timeout} -u ${mysql_user} -p${mysql_pass} -h ${master_node} -e "PURGE MASTER LOGS TO '${currentlog}';"
else echo "Dry run, skipped purging binary logs on master" ; fi
[ $? -ne 0 ] && die "could not purge master logs up to ${currentlog} ON ${master_node} (which was using ${masterlog})"

